package net.minecraft.world.gen;

import java.lang.reflect.*;
import net.minecraft.util.*;
import net.minecraft.init.*;
import net.minecraft.world.biome.*;
import com.google.common.annotations.*;
import com.google.gson.*;

public class ChunkGeneratorSettings
{
    public final /* synthetic */ float lowerLimitScale;
    public final /* synthetic */ int coalSize;
    public final /* synthetic */ int gravelMinHeight;
    public final /* synthetic */ int andesiteSize;
    public final /* synthetic */ int dioriteMaxHeight;
    public final /* synthetic */ int ironMaxHeight;
    public final /* synthetic */ int lapisSize;
    public final /* synthetic */ int seaLevel;
    public final /* synthetic */ float mainNoiseScaleX;
    public final /* synthetic */ boolean useTemples;
    public final /* synthetic */ int diamondMinHeight;
    public final /* synthetic */ float baseSize;
    public final /* synthetic */ float depthNoiseScaleX;
    public final /* synthetic */ float upperLimitScale;
    public final /* synthetic */ boolean useRavines;
    public final /* synthetic */ float biomeScaleOffset;
    public final /* synthetic */ int graniteMaxHeight;
    public final /* synthetic */ float biomeDepthWeight;
    public final /* synthetic */ boolean useMonuments;
    public final /* synthetic */ int ironSize;
    public final /* synthetic */ float depthNoiseScaleZ;
    public final /* synthetic */ boolean useLavaOceans;
    public final /* synthetic */ int goldSize;
    public final /* synthetic */ int goldMinHeight;
    public final /* synthetic */ int dirtCount;
    public final /* synthetic */ int lavaLakeChance;
    public final /* synthetic */ float heightScale;
    public final /* synthetic */ boolean useWaterLakes;
    public final /* synthetic */ int andesiteCount;
    public final /* synthetic */ int lapisSpread;
    public final /* synthetic */ int graniteMinHeight;
    public final /* synthetic */ int biomeSize;
    public final /* synthetic */ int diamondMaxHeight;
    public final /* synthetic */ int dirtSize;
    public final /* synthetic */ float depthNoiseScaleExponent;
    public final /* synthetic */ int diamondSize;
    public final /* synthetic */ int graniteSize;
    public final /* synthetic */ boolean useVillages;
    public final /* synthetic */ int coalMinHeight;
    public final /* synthetic */ int andesiteMinHeight;
    public final /* synthetic */ int gravelSize;
    public final /* synthetic */ int dioriteMinHeight;
    public final /* synthetic */ int lapisCount;
    public final /* synthetic */ int dioriteCount;
    public final /* synthetic */ int dungeonChance;
    public final /* synthetic */ float coordinateScale;
    public final /* synthetic */ boolean useStrongholds;
    public final /* synthetic */ float mainNoiseScaleY;
    public final /* synthetic */ int dirtMaxHeight;
    public final /* synthetic */ int ironCount;
    public final /* synthetic */ int coalMaxHeight;
    public final /* synthetic */ int redstoneMinHeight;
    public final /* synthetic */ int riverSize;
    public final /* synthetic */ int redstoneMaxHeight;
    public final /* synthetic */ int andesiteMaxHeight;
    public final /* synthetic */ int ironMinHeight;
    public final /* synthetic */ int lapisCenterHeight;
    public final /* synthetic */ float mainNoiseScaleZ;
    public final /* synthetic */ boolean useLavaLakes;
    public final /* synthetic */ int coalCount;
    public final /* synthetic */ int redstoneCount;
    public final /* synthetic */ boolean useDungeons;
    public final /* synthetic */ int waterLakeChance;
    public final /* synthetic */ float biomeScaleWeight;
    public final /* synthetic */ int gravelMaxHeight;
    public final /* synthetic */ int gravelCount;
    public final /* synthetic */ int dioriteSize;
    public final /* synthetic */ boolean field_191077_z;
    public final /* synthetic */ int goldMaxHeight;
    public final /* synthetic */ float stretchY;
    public final /* synthetic */ int redstoneSize;
    public final /* synthetic */ boolean useMineShafts;
    public final /* synthetic */ int fixedBiome;
    public final /* synthetic */ int graniteCount;
    public final /* synthetic */ float biomeDepthOffSet;
    public final /* synthetic */ boolean useCaves;
    public final /* synthetic */ int goldCount;
    public final /* synthetic */ int diamondCount;
    public final /* synthetic */ int dirtMinHeight;
    
    private ChunkGeneratorSettings(final Factory lllllllllllllIIIIIIIIIllIllIlIll) {
        this.coordinateScale = lllllllllllllIIIIIIIIIllIllIlIll.coordinateScale;
        this.heightScale = lllllllllllllIIIIIIIIIllIllIlIll.heightScale;
        this.upperLimitScale = lllllllllllllIIIIIIIIIllIllIlIll.upperLimitScale;
        this.lowerLimitScale = lllllllllllllIIIIIIIIIllIllIlIll.lowerLimitScale;
        this.depthNoiseScaleX = lllllllllllllIIIIIIIIIllIllIlIll.depthNoiseScaleX;
        this.depthNoiseScaleZ = lllllllllllllIIIIIIIIIllIllIlIll.depthNoiseScaleZ;
        this.depthNoiseScaleExponent = lllllllllllllIIIIIIIIIllIllIlIll.depthNoiseScaleExponent;
        this.mainNoiseScaleX = lllllllllllllIIIIIIIIIllIllIlIll.mainNoiseScaleX;
        this.mainNoiseScaleY = lllllllllllllIIIIIIIIIllIllIlIll.mainNoiseScaleY;
        this.mainNoiseScaleZ = lllllllllllllIIIIIIIIIllIllIlIll.mainNoiseScaleZ;
        this.baseSize = lllllllllllllIIIIIIIIIllIllIlIll.baseSize;
        this.stretchY = lllllllllllllIIIIIIIIIllIllIlIll.stretchY;
        this.biomeDepthWeight = lllllllllllllIIIIIIIIIllIllIlIll.biomeDepthWeight;
        this.biomeDepthOffSet = lllllllllllllIIIIIIIIIllIllIlIll.biomeDepthOffset;
        this.biomeScaleWeight = lllllllllllllIIIIIIIIIllIllIlIll.biomeScaleWeight;
        this.biomeScaleOffset = lllllllllllllIIIIIIIIIllIllIlIll.biomeScaleOffset;
        this.seaLevel = lllllllllllllIIIIIIIIIllIllIlIll.seaLevel;
        this.useCaves = lllllllllllllIIIIIIIIIllIllIlIll.useCaves;
        this.useDungeons = lllllllllllllIIIIIIIIIllIllIlIll.useDungeons;
        this.dungeonChance = lllllllllllllIIIIIIIIIllIllIlIll.dungeonChance;
        this.useStrongholds = lllllllllllllIIIIIIIIIllIllIlIll.useStrongholds;
        this.useVillages = lllllllllllllIIIIIIIIIllIllIlIll.useVillages;
        this.useMineShafts = lllllllllllllIIIIIIIIIllIllIlIll.useMineShafts;
        this.useTemples = lllllllllllllIIIIIIIIIllIllIlIll.useTemples;
        this.useMonuments = lllllllllllllIIIIIIIIIllIllIlIll.useMonuments;
        this.field_191077_z = lllllllllllllIIIIIIIIIllIllIlIll.field_191076_A;
        this.useRavines = lllllllllllllIIIIIIIIIllIllIlIll.useRavines;
        this.useWaterLakes = lllllllllllllIIIIIIIIIllIllIlIll.useWaterLakes;
        this.waterLakeChance = lllllllllllllIIIIIIIIIllIllIlIll.waterLakeChance;
        this.useLavaLakes = lllllllllllllIIIIIIIIIllIllIlIll.useLavaLakes;
        this.lavaLakeChance = lllllllllllllIIIIIIIIIllIllIlIll.lavaLakeChance;
        this.useLavaOceans = lllllllllllllIIIIIIIIIllIllIlIll.useLavaOceans;
        this.fixedBiome = lllllllllllllIIIIIIIIIllIllIlIll.fixedBiome;
        this.biomeSize = lllllllllllllIIIIIIIIIllIllIlIll.biomeSize;
        this.riverSize = lllllllllllllIIIIIIIIIllIllIlIll.riverSize;
        this.dirtSize = lllllllllllllIIIIIIIIIllIllIlIll.dirtSize;
        this.dirtCount = lllllllllllllIIIIIIIIIllIllIlIll.dirtCount;
        this.dirtMinHeight = lllllllllllllIIIIIIIIIllIllIlIll.dirtMinHeight;
        this.dirtMaxHeight = lllllllllllllIIIIIIIIIllIllIlIll.dirtMaxHeight;
        this.gravelSize = lllllllllllllIIIIIIIIIllIllIlIll.gravelSize;
        this.gravelCount = lllllllllllllIIIIIIIIIllIllIlIll.gravelCount;
        this.gravelMinHeight = lllllllllllllIIIIIIIIIllIllIlIll.gravelMinHeight;
        this.gravelMaxHeight = lllllllllllllIIIIIIIIIllIllIlIll.gravelMaxHeight;
        this.graniteSize = lllllllllllllIIIIIIIIIllIllIlIll.graniteSize;
        this.graniteCount = lllllllllllllIIIIIIIIIllIllIlIll.graniteCount;
        this.graniteMinHeight = lllllllllllllIIIIIIIIIllIllIlIll.graniteMinHeight;
        this.graniteMaxHeight = lllllllllllllIIIIIIIIIllIllIlIll.graniteMaxHeight;
        this.dioriteSize = lllllllllllllIIIIIIIIIllIllIlIll.dioriteSize;
        this.dioriteCount = lllllllllllllIIIIIIIIIllIllIlIll.dioriteCount;
        this.dioriteMinHeight = lllllllllllllIIIIIIIIIllIllIlIll.dioriteMinHeight;
        this.dioriteMaxHeight = lllllllllllllIIIIIIIIIllIllIlIll.dioriteMaxHeight;
        this.andesiteSize = lllllllllllllIIIIIIIIIllIllIlIll.andesiteSize;
        this.andesiteCount = lllllllllllllIIIIIIIIIllIllIlIll.andesiteCount;
        this.andesiteMinHeight = lllllllllllllIIIIIIIIIllIllIlIll.andesiteMinHeight;
        this.andesiteMaxHeight = lllllllllllllIIIIIIIIIllIllIlIll.andesiteMaxHeight;
        this.coalSize = lllllllllllllIIIIIIIIIllIllIlIll.coalSize;
        this.coalCount = lllllllllllllIIIIIIIIIllIllIlIll.coalCount;
        this.coalMinHeight = lllllllllllllIIIIIIIIIllIllIlIll.coalMinHeight;
        this.coalMaxHeight = lllllllllllllIIIIIIIIIllIllIlIll.coalMaxHeight;
        this.ironSize = lllllllllllllIIIIIIIIIllIllIlIll.ironSize;
        this.ironCount = lllllllllllllIIIIIIIIIllIllIlIll.ironCount;
        this.ironMinHeight = lllllllllllllIIIIIIIIIllIllIlIll.ironMinHeight;
        this.ironMaxHeight = lllllllllllllIIIIIIIIIllIllIlIll.ironMaxHeight;
        this.goldSize = lllllllllllllIIIIIIIIIllIllIlIll.goldSize;
        this.goldCount = lllllllllllllIIIIIIIIIllIllIlIll.goldCount;
        this.goldMinHeight = lllllllllllllIIIIIIIIIllIllIlIll.goldMinHeight;
        this.goldMaxHeight = lllllllllllllIIIIIIIIIllIllIlIll.goldMaxHeight;
        this.redstoneSize = lllllllllllllIIIIIIIIIllIllIlIll.redstoneSize;
        this.redstoneCount = lllllllllllllIIIIIIIIIllIllIlIll.redstoneCount;
        this.redstoneMinHeight = lllllllllllllIIIIIIIIIllIllIlIll.redstoneMinHeight;
        this.redstoneMaxHeight = lllllllllllllIIIIIIIIIllIllIlIll.redstoneMaxHeight;
        this.diamondSize = lllllllllllllIIIIIIIIIllIllIlIll.diamondSize;
        this.diamondCount = lllllllllllllIIIIIIIIIllIllIlIll.diamondCount;
        this.diamondMinHeight = lllllllllllllIIIIIIIIIllIllIlIll.diamondMinHeight;
        this.diamondMaxHeight = lllllllllllllIIIIIIIIIllIllIlIll.diamondMaxHeight;
        this.lapisSize = lllllllllllllIIIIIIIIIllIllIlIll.lapisSize;
        this.lapisCount = lllllllllllllIIIIIIIIIllIllIlIll.lapisCount;
        this.lapisCenterHeight = lllllllllllllIIIIIIIIIllIllIlIll.lapisCenterHeight;
        this.lapisSpread = lllllllllllllIIIIIIIIIllIllIlIll.lapisSpread;
    }
    
    public static class Serializer implements JsonDeserializer<Factory>, JsonSerializer<Factory>
    {
        public JsonElement serialize(final Factory lllllllllllllIlllIlIlIllIIlIlIIl, final Type lllllllllllllIlllIlIlIllIIlIllII, final JsonSerializationContext lllllllllllllIlllIlIlIllIIlIlIll) {
            final JsonObject lllllllllllllIlllIlIlIllIIlIlIlI = new JsonObject();
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("coordinateScale", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.coordinateScale);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("heightScale", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.heightScale);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("lowerLimitScale", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.lowerLimitScale);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("upperLimitScale", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.upperLimitScale);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("depthNoiseScaleX", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.depthNoiseScaleX);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("depthNoiseScaleZ", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.depthNoiseScaleZ);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("depthNoiseScaleExponent", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.depthNoiseScaleExponent);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("mainNoiseScaleX", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.mainNoiseScaleX);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("mainNoiseScaleY", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.mainNoiseScaleY);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("mainNoiseScaleZ", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.mainNoiseScaleZ);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("baseSize", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.baseSize);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("stretchY", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.stretchY);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("biomeDepthWeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.biomeDepthWeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("biomeDepthOffset", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.biomeDepthOffset);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("biomeScaleWeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.biomeScaleWeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("biomeScaleOffset", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.biomeScaleOffset);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("seaLevel", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.seaLevel);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("useCaves", Boolean.valueOf(lllllllllllllIlllIlIlIllIIlIlIIl.useCaves));
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("useDungeons", Boolean.valueOf(lllllllllllllIlllIlIlIllIIlIlIIl.useDungeons));
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("dungeonChance", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.dungeonChance);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("useStrongholds", Boolean.valueOf(lllllllllllllIlllIlIlIllIIlIlIIl.useStrongholds));
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("useVillages", Boolean.valueOf(lllllllllllllIlllIlIlIllIIlIlIIl.useVillages));
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("useMineShafts", Boolean.valueOf(lllllllllllllIlllIlIlIllIIlIlIIl.useMineShafts));
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("useTemples", Boolean.valueOf(lllllllllllllIlllIlIlIllIIlIlIIl.useTemples));
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("useMonuments", Boolean.valueOf(lllllllllllllIlllIlIlIllIIlIlIIl.useMonuments));
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("useMansions", Boolean.valueOf(lllllllllllllIlllIlIlIllIIlIlIIl.field_191076_A));
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("useRavines", Boolean.valueOf(lllllllllllllIlllIlIlIllIIlIlIIl.useRavines));
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("useWaterLakes", Boolean.valueOf(lllllllllllllIlllIlIlIllIIlIlIIl.useWaterLakes));
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("waterLakeChance", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.waterLakeChance);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("useLavaLakes", Boolean.valueOf(lllllllllllllIlllIlIlIllIIlIlIIl.useLavaLakes));
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("lavaLakeChance", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.lavaLakeChance);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("useLavaOceans", Boolean.valueOf(lllllllllllllIlllIlIlIllIIlIlIIl.useLavaOceans));
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("fixedBiome", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.fixedBiome);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("biomeSize", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.biomeSize);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("riverSize", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.riverSize);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("dirtSize", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.dirtSize);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("dirtCount", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.dirtCount);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("dirtMinHeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.dirtMinHeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("dirtMaxHeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.dirtMaxHeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("gravelSize", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.gravelSize);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("gravelCount", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.gravelCount);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("gravelMinHeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.gravelMinHeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("gravelMaxHeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.gravelMaxHeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("graniteSize", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.graniteSize);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("graniteCount", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.graniteCount);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("graniteMinHeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.graniteMinHeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("graniteMaxHeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.graniteMaxHeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("dioriteSize", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.dioriteSize);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("dioriteCount", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.dioriteCount);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("dioriteMinHeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.dioriteMinHeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("dioriteMaxHeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.dioriteMaxHeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("andesiteSize", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.andesiteSize);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("andesiteCount", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.andesiteCount);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("andesiteMinHeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.andesiteMinHeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("andesiteMaxHeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.andesiteMaxHeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("coalSize", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.coalSize);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("coalCount", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.coalCount);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("coalMinHeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.coalMinHeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("coalMaxHeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.coalMaxHeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("ironSize", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.ironSize);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("ironCount", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.ironCount);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("ironMinHeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.ironMinHeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("ironMaxHeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.ironMaxHeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("goldSize", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.goldSize);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("goldCount", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.goldCount);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("goldMinHeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.goldMinHeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("goldMaxHeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.goldMaxHeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("redstoneSize", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.redstoneSize);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("redstoneCount", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.redstoneCount);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("redstoneMinHeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.redstoneMinHeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("redstoneMaxHeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.redstoneMaxHeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("diamondSize", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.diamondSize);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("diamondCount", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.diamondCount);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("diamondMinHeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.diamondMinHeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("diamondMaxHeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.diamondMaxHeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("lapisSize", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.lapisSize);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("lapisCount", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.lapisCount);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("lapisCenterHeight", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.lapisCenterHeight);
            lllllllllllllIlllIlIlIllIIlIlIlI.addProperty("lapisSpread", (Number)lllllllllllllIlllIlIlIllIIlIlIIl.lapisSpread);
            return (JsonElement)lllllllllllllIlllIlIlIllIIlIlIlI;
        }
        
        public Factory deserialize(final JsonElement lllllllllllllIlllIlIlIllIIllIlII, final Type lllllllllllllIlllIlIlIllIIlllIII, final JsonDeserializationContext lllllllllllllIlllIlIlIllIIllIlll) throws JsonParseException {
            final JsonObject lllllllllllllIlllIlIlIllIIllIllI = lllllllllllllIlllIlIlIllIIllIlII.getAsJsonObject();
            final Factory lllllllllllllIlllIlIlIllIIllIlIl = new Factory();
            try {
                lllllllllllllIlllIlIlIllIIllIlIl.coordinateScale = JsonUtils.getFloat(lllllllllllllIlllIlIlIllIIllIllI, "coordinateScale", lllllllllllllIlllIlIlIllIIllIlIl.coordinateScale);
                lllllllllllllIlllIlIlIllIIllIlIl.heightScale = JsonUtils.getFloat(lllllllllllllIlllIlIlIllIIllIllI, "heightScale", lllllllllllllIlllIlIlIllIIllIlIl.heightScale);
                lllllllllllllIlllIlIlIllIIllIlIl.lowerLimitScale = JsonUtils.getFloat(lllllllllllllIlllIlIlIllIIllIllI, "lowerLimitScale", lllllllllllllIlllIlIlIllIIllIlIl.lowerLimitScale);
                lllllllllllllIlllIlIlIllIIllIlIl.upperLimitScale = JsonUtils.getFloat(lllllllllllllIlllIlIlIllIIllIllI, "upperLimitScale", lllllllllllllIlllIlIlIllIIllIlIl.upperLimitScale);
                lllllllllllllIlllIlIlIllIIllIlIl.depthNoiseScaleX = JsonUtils.getFloat(lllllllllllllIlllIlIlIllIIllIllI, "depthNoiseScaleX", lllllllllllllIlllIlIlIllIIllIlIl.depthNoiseScaleX);
                lllllllllllllIlllIlIlIllIIllIlIl.depthNoiseScaleZ = JsonUtils.getFloat(lllllllllllllIlllIlIlIllIIllIllI, "depthNoiseScaleZ", lllllllllllllIlllIlIlIllIIllIlIl.depthNoiseScaleZ);
                lllllllllllllIlllIlIlIllIIllIlIl.depthNoiseScaleExponent = JsonUtils.getFloat(lllllllllllllIlllIlIlIllIIllIllI, "depthNoiseScaleExponent", lllllllllllllIlllIlIlIllIIllIlIl.depthNoiseScaleExponent);
                lllllllllllllIlllIlIlIllIIllIlIl.mainNoiseScaleX = JsonUtils.getFloat(lllllllllllllIlllIlIlIllIIllIllI, "mainNoiseScaleX", lllllllllllllIlllIlIlIllIIllIlIl.mainNoiseScaleX);
                lllllllllllllIlllIlIlIllIIllIlIl.mainNoiseScaleY = JsonUtils.getFloat(lllllllllllllIlllIlIlIllIIllIllI, "mainNoiseScaleY", lllllllllllllIlllIlIlIllIIllIlIl.mainNoiseScaleY);
                lllllllllllllIlllIlIlIllIIllIlIl.mainNoiseScaleZ = JsonUtils.getFloat(lllllllllllllIlllIlIlIllIIllIllI, "mainNoiseScaleZ", lllllllllllllIlllIlIlIllIIllIlIl.mainNoiseScaleZ);
                lllllllllllllIlllIlIlIllIIllIlIl.baseSize = JsonUtils.getFloat(lllllllllllllIlllIlIlIllIIllIllI, "baseSize", lllllllllllllIlllIlIlIllIIllIlIl.baseSize);
                lllllllllllllIlllIlIlIllIIllIlIl.stretchY = JsonUtils.getFloat(lllllllllllllIlllIlIlIllIIllIllI, "stretchY", lllllllllllllIlllIlIlIllIIllIlIl.stretchY);
                lllllllllllllIlllIlIlIllIIllIlIl.biomeDepthWeight = JsonUtils.getFloat(lllllllllllllIlllIlIlIllIIllIllI, "biomeDepthWeight", lllllllllllllIlllIlIlIllIIllIlIl.biomeDepthWeight);
                lllllllllllllIlllIlIlIllIIllIlIl.biomeDepthOffset = JsonUtils.getFloat(lllllllllllllIlllIlIlIllIIllIllI, "biomeDepthOffset", lllllllllllllIlllIlIlIllIIllIlIl.biomeDepthOffset);
                lllllllllllllIlllIlIlIllIIllIlIl.biomeScaleWeight = JsonUtils.getFloat(lllllllllllllIlllIlIlIllIIllIllI, "biomeScaleWeight", lllllllllllllIlllIlIlIllIIllIlIl.biomeScaleWeight);
                lllllllllllllIlllIlIlIllIIllIlIl.biomeScaleOffset = JsonUtils.getFloat(lllllllllllllIlllIlIlIllIIllIllI, "biomeScaleOffset", lllllllllllllIlllIlIlIllIIllIlIl.biomeScaleOffset);
                lllllllllllllIlllIlIlIllIIllIlIl.seaLevel = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "seaLevel", lllllllllllllIlllIlIlIllIIllIlIl.seaLevel);
                lllllllllllllIlllIlIlIllIIllIlIl.useCaves = JsonUtils.getBoolean(lllllllllllllIlllIlIlIllIIllIllI, "useCaves", lllllllllllllIlllIlIlIllIIllIlIl.useCaves);
                lllllllllllllIlllIlIlIllIIllIlIl.useDungeons = JsonUtils.getBoolean(lllllllllllllIlllIlIlIllIIllIllI, "useDungeons", lllllllllllllIlllIlIlIllIIllIlIl.useDungeons);
                lllllllllllllIlllIlIlIllIIllIlIl.dungeonChance = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "dungeonChance", lllllllllllllIlllIlIlIllIIllIlIl.dungeonChance);
                lllllllllllllIlllIlIlIllIIllIlIl.useStrongholds = JsonUtils.getBoolean(lllllllllllllIlllIlIlIllIIllIllI, "useStrongholds", lllllllllllllIlllIlIlIllIIllIlIl.useStrongholds);
                lllllllllllllIlllIlIlIllIIllIlIl.useVillages = JsonUtils.getBoolean(lllllllllllllIlllIlIlIllIIllIllI, "useVillages", lllllllllllllIlllIlIlIllIIllIlIl.useVillages);
                lllllllllllllIlllIlIlIllIIllIlIl.useMineShafts = JsonUtils.getBoolean(lllllllllllllIlllIlIlIllIIllIllI, "useMineShafts", lllllllllllllIlllIlIlIllIIllIlIl.useMineShafts);
                lllllllllllllIlllIlIlIllIIllIlIl.useTemples = JsonUtils.getBoolean(lllllllllllllIlllIlIlIllIIllIllI, "useTemples", lllllllllllllIlllIlIlIllIIllIlIl.useTemples);
                lllllllllllllIlllIlIlIllIIllIlIl.useMonuments = JsonUtils.getBoolean(lllllllllllllIlllIlIlIllIIllIllI, "useMonuments", lllllllllllllIlllIlIlIllIIllIlIl.useMonuments);
                lllllllllllllIlllIlIlIllIIllIlIl.field_191076_A = JsonUtils.getBoolean(lllllllllllllIlllIlIlIllIIllIllI, "useMansions", lllllllllllllIlllIlIlIllIIllIlIl.field_191076_A);
                lllllllllllllIlllIlIlIllIIllIlIl.useRavines = JsonUtils.getBoolean(lllllllllllllIlllIlIlIllIIllIllI, "useRavines", lllllllllllllIlllIlIlIllIIllIlIl.useRavines);
                lllllllllllllIlllIlIlIllIIllIlIl.useWaterLakes = JsonUtils.getBoolean(lllllllllllllIlllIlIlIllIIllIllI, "useWaterLakes", lllllllllllllIlllIlIlIllIIllIlIl.useWaterLakes);
                lllllllllllllIlllIlIlIllIIllIlIl.waterLakeChance = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "waterLakeChance", lllllllllllllIlllIlIlIllIIllIlIl.waterLakeChance);
                lllllllllllllIlllIlIlIllIIllIlIl.useLavaLakes = JsonUtils.getBoolean(lllllllllllllIlllIlIlIllIIllIllI, "useLavaLakes", lllllllllllllIlllIlIlIllIIllIlIl.useLavaLakes);
                lllllllllllllIlllIlIlIllIIllIlIl.lavaLakeChance = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "lavaLakeChance", lllllllllllllIlllIlIlIllIIllIlIl.lavaLakeChance);
                lllllllllllllIlllIlIlIllIIllIlIl.useLavaOceans = JsonUtils.getBoolean(lllllllllllllIlllIlIlIllIIllIllI, "useLavaOceans", lllllllllllllIlllIlIlIllIIllIlIl.useLavaOceans);
                lllllllllllllIlllIlIlIllIIllIlIl.fixedBiome = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "fixedBiome", lllllllllllllIlllIlIlIllIIllIlIl.fixedBiome);
                if (lllllllllllllIlllIlIlIllIIllIlIl.fixedBiome < 38 && lllllllllllllIlllIlIlIllIIllIlIl.fixedBiome >= -1) {
                    if (lllllllllllllIlllIlIlIllIIllIlIl.fixedBiome >= Biome.getIdForBiome(Biomes.HELL)) {
                        final Factory factory = lllllllllllllIlllIlIlIllIIllIlIl;
                        factory.fixedBiome += 2;
                    }
                }
                else {
                    lllllllllllllIlllIlIlIllIIllIlIl.fixedBiome = -1;
                }
                lllllllllllllIlllIlIlIllIIllIlIl.biomeSize = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "biomeSize", lllllllllllllIlllIlIlIllIIllIlIl.biomeSize);
                lllllllllllllIlllIlIlIllIIllIlIl.riverSize = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "riverSize", lllllllllllllIlllIlIlIllIIllIlIl.riverSize);
                lllllllllllllIlllIlIlIllIIllIlIl.dirtSize = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "dirtSize", lllllllllllllIlllIlIlIllIIllIlIl.dirtSize);
                lllllllllllllIlllIlIlIllIIllIlIl.dirtCount = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "dirtCount", lllllllllllllIlllIlIlIllIIllIlIl.dirtCount);
                lllllllllllllIlllIlIlIllIIllIlIl.dirtMinHeight = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "dirtMinHeight", lllllllllllllIlllIlIlIllIIllIlIl.dirtMinHeight);
                lllllllllllllIlllIlIlIllIIllIlIl.dirtMaxHeight = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "dirtMaxHeight", lllllllllllllIlllIlIlIllIIllIlIl.dirtMaxHeight);
                lllllllllllllIlllIlIlIllIIllIlIl.gravelSize = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "gravelSize", lllllllllllllIlllIlIlIllIIllIlIl.gravelSize);
                lllllllllllllIlllIlIlIllIIllIlIl.gravelCount = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "gravelCount", lllllllllllllIlllIlIlIllIIllIlIl.gravelCount);
                lllllllllllllIlllIlIlIllIIllIlIl.gravelMinHeight = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "gravelMinHeight", lllllllllllllIlllIlIlIllIIllIlIl.gravelMinHeight);
                lllllllllllllIlllIlIlIllIIllIlIl.gravelMaxHeight = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "gravelMaxHeight", lllllllllllllIlllIlIlIllIIllIlIl.gravelMaxHeight);
                lllllllllllllIlllIlIlIllIIllIlIl.graniteSize = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "graniteSize", lllllllllllllIlllIlIlIllIIllIlIl.graniteSize);
                lllllllllllllIlllIlIlIllIIllIlIl.graniteCount = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "graniteCount", lllllllllllllIlllIlIlIllIIllIlIl.graniteCount);
                lllllllllllllIlllIlIlIllIIllIlIl.graniteMinHeight = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "graniteMinHeight", lllllllllllllIlllIlIlIllIIllIlIl.graniteMinHeight);
                lllllllllllllIlllIlIlIllIIllIlIl.graniteMaxHeight = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "graniteMaxHeight", lllllllllllllIlllIlIlIllIIllIlIl.graniteMaxHeight);
                lllllllllllllIlllIlIlIllIIllIlIl.dioriteSize = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "dioriteSize", lllllllllllllIlllIlIlIllIIllIlIl.dioriteSize);
                lllllllllllllIlllIlIlIllIIllIlIl.dioriteCount = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "dioriteCount", lllllllllllllIlllIlIlIllIIllIlIl.dioriteCount);
                lllllllllllllIlllIlIlIllIIllIlIl.dioriteMinHeight = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "dioriteMinHeight", lllllllllllllIlllIlIlIllIIllIlIl.dioriteMinHeight);
                lllllllllllllIlllIlIlIllIIllIlIl.dioriteMaxHeight = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "dioriteMaxHeight", lllllllllllllIlllIlIlIllIIllIlIl.dioriteMaxHeight);
                lllllllllllllIlllIlIlIllIIllIlIl.andesiteSize = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "andesiteSize", lllllllllllllIlllIlIlIllIIllIlIl.andesiteSize);
                lllllllllllllIlllIlIlIllIIllIlIl.andesiteCount = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "andesiteCount", lllllllllllllIlllIlIlIllIIllIlIl.andesiteCount);
                lllllllllllllIlllIlIlIllIIllIlIl.andesiteMinHeight = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "andesiteMinHeight", lllllllllllllIlllIlIlIllIIllIlIl.andesiteMinHeight);
                lllllllllllllIlllIlIlIllIIllIlIl.andesiteMaxHeight = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "andesiteMaxHeight", lllllllllllllIlllIlIlIllIIllIlIl.andesiteMaxHeight);
                lllllllllllllIlllIlIlIllIIllIlIl.coalSize = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "coalSize", lllllllllllllIlllIlIlIllIIllIlIl.coalSize);
                lllllllllllllIlllIlIlIllIIllIlIl.coalCount = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "coalCount", lllllllllllllIlllIlIlIllIIllIlIl.coalCount);
                lllllllllllllIlllIlIlIllIIllIlIl.coalMinHeight = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "coalMinHeight", lllllllllllllIlllIlIlIllIIllIlIl.coalMinHeight);
                lllllllllllllIlllIlIlIllIIllIlIl.coalMaxHeight = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "coalMaxHeight", lllllllllllllIlllIlIlIllIIllIlIl.coalMaxHeight);
                lllllllllllllIlllIlIlIllIIllIlIl.ironSize = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "ironSize", lllllllllllllIlllIlIlIllIIllIlIl.ironSize);
                lllllllllllllIlllIlIlIllIIllIlIl.ironCount = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "ironCount", lllllllllllllIlllIlIlIllIIllIlIl.ironCount);
                lllllllllllllIlllIlIlIllIIllIlIl.ironMinHeight = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "ironMinHeight", lllllllllllllIlllIlIlIllIIllIlIl.ironMinHeight);
                lllllllllllllIlllIlIlIllIIllIlIl.ironMaxHeight = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "ironMaxHeight", lllllllllllllIlllIlIlIllIIllIlIl.ironMaxHeight);
                lllllllllllllIlllIlIlIllIIllIlIl.goldSize = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "goldSize", lllllllllllllIlllIlIlIllIIllIlIl.goldSize);
                lllllllllllllIlllIlIlIllIIllIlIl.goldCount = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "goldCount", lllllllllllllIlllIlIlIllIIllIlIl.goldCount);
                lllllllllllllIlllIlIlIllIIllIlIl.goldMinHeight = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "goldMinHeight", lllllllllllllIlllIlIlIllIIllIlIl.goldMinHeight);
                lllllllllllllIlllIlIlIllIIllIlIl.goldMaxHeight = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "goldMaxHeight", lllllllllllllIlllIlIlIllIIllIlIl.goldMaxHeight);
                lllllllllllllIlllIlIlIllIIllIlIl.redstoneSize = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "redstoneSize", lllllllllllllIlllIlIlIllIIllIlIl.redstoneSize);
                lllllllllllllIlllIlIlIllIIllIlIl.redstoneCount = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "redstoneCount", lllllllllllllIlllIlIlIllIIllIlIl.redstoneCount);
                lllllllllllllIlllIlIlIllIIllIlIl.redstoneMinHeight = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "redstoneMinHeight", lllllllllllllIlllIlIlIllIIllIlIl.redstoneMinHeight);
                lllllllllllllIlllIlIlIllIIllIlIl.redstoneMaxHeight = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "redstoneMaxHeight", lllllllllllllIlllIlIlIllIIllIlIl.redstoneMaxHeight);
                lllllllllllllIlllIlIlIllIIllIlIl.diamondSize = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "diamondSize", lllllllllllllIlllIlIlIllIIllIlIl.diamondSize);
                lllllllllllllIlllIlIlIllIIllIlIl.diamondCount = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "diamondCount", lllllllllllllIlllIlIlIllIIllIlIl.diamondCount);
                lllllllllllllIlllIlIlIllIIllIlIl.diamondMinHeight = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "diamondMinHeight", lllllllllllllIlllIlIlIllIIllIlIl.diamondMinHeight);
                lllllllllllllIlllIlIlIllIIllIlIl.diamondMaxHeight = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "diamondMaxHeight", lllllllllllllIlllIlIlIllIIllIlIl.diamondMaxHeight);
                lllllllllllllIlllIlIlIllIIllIlIl.lapisSize = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "lapisSize", lllllllllllllIlllIlIlIllIIllIlIl.lapisSize);
                lllllllllllllIlllIlIlIllIIllIlIl.lapisCount = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "lapisCount", lllllllllllllIlllIlIlIllIIllIlIl.lapisCount);
                lllllllllllllIlllIlIlIllIIllIlIl.lapisCenterHeight = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "lapisCenterHeight", lllllllllllllIlllIlIlIllIIllIlIl.lapisCenterHeight);
                lllllllllllllIlllIlIlIllIIllIlIl.lapisSpread = JsonUtils.getInt(lllllllllllllIlllIlIlIllIIllIllI, "lapisSpread", lllllllllllllIlllIlIlIllIIllIlIl.lapisSpread);
            }
            catch (Exception ex) {}
            return lllllllllllllIlllIlIlIllIIllIlIl;
        }
    }
    
    public static class Factory
    {
        public /* synthetic */ int gravelCount;
        public /* synthetic */ float mainNoiseScaleY;
        public /* synthetic */ int andesiteMaxHeight;
        public /* synthetic */ float baseSize;
        public /* synthetic */ int gravelMinHeight;
        public /* synthetic */ int ironMaxHeight;
        public /* synthetic */ boolean useWaterLakes;
        public /* synthetic */ int andesiteCount;
        public /* synthetic */ boolean useDungeons;
        public /* synthetic */ int ironCount;
        public /* synthetic */ int dioriteCount;
        public /* synthetic */ int gravelSize;
        public /* synthetic */ boolean useRavines;
        public /* synthetic */ int diamondCount;
        @VisibleForTesting
        static final /* synthetic */ Gson JSON_ADAPTER;
        public /* synthetic */ int waterLakeChance;
        public /* synthetic */ int ironMinHeight;
        public /* synthetic */ int graniteMinHeight;
        public /* synthetic */ float heightScale;
        public /* synthetic */ float lowerLimitScale;
        public /* synthetic */ int coalMinHeight;
        public /* synthetic */ int graniteSize;
        public /* synthetic */ int riverSize;
        public /* synthetic */ int redstoneMaxHeight;
        public /* synthetic */ float depthNoiseScaleX;
        public /* synthetic */ int andesiteMinHeight;
        public /* synthetic */ int goldMinHeight;
        public /* synthetic */ int dioriteMaxHeight;
        public /* synthetic */ int ironSize;
        public /* synthetic */ int graniteCount;
        public /* synthetic */ int seaLevel;
        public /* synthetic */ int lapisSpread;
        public /* synthetic */ int fixedBiome;
        public /* synthetic */ int biomeSize;
        public /* synthetic */ int redstoneMinHeight;
        public /* synthetic */ int goldCount;
        public /* synthetic */ float depthNoiseScaleExponent;
        public /* synthetic */ boolean useMonuments;
        public /* synthetic */ int redstoneSize;
        public /* synthetic */ boolean field_191076_A;
        public /* synthetic */ int diamondMinHeight;
        public /* synthetic */ boolean useTemples;
        public /* synthetic */ int dirtMaxHeight;
        public /* synthetic */ float depthNoiseScaleZ;
        public /* synthetic */ float upperLimitScale;
        public /* synthetic */ float biomeDepthWeight;
        public /* synthetic */ float biomeScaleOffset;
        public /* synthetic */ int lapisCount;
        public /* synthetic */ int andesiteSize;
        public /* synthetic */ int lavaLakeChance;
        public /* synthetic */ boolean useStrongholds;
        public /* synthetic */ int dioriteSize;
        public /* synthetic */ int dirtMinHeight;
        public /* synthetic */ int dungeonChance;
        public /* synthetic */ int diamondSize;
        public /* synthetic */ int dirtSize;
        public /* synthetic */ boolean useMineShafts;
        public /* synthetic */ boolean useLavaOceans;
        public /* synthetic */ int redstoneCount;
        public /* synthetic */ boolean useCaves;
        public /* synthetic */ int lapisCenterHeight;
        public /* synthetic */ int coalMaxHeight;
        public /* synthetic */ float mainNoiseScaleZ;
        public /* synthetic */ int lapisSize;
        public /* synthetic */ float biomeScaleWeight;
        public /* synthetic */ int coalSize;
        public /* synthetic */ float coordinateScale;
        public /* synthetic */ int dirtCount;
        public /* synthetic */ int coalCount;
        public /* synthetic */ int diamondMaxHeight;
        public /* synthetic */ int graniteMaxHeight;
        public /* synthetic */ float biomeDepthOffset;
        public /* synthetic */ int dioriteMinHeight;
        public /* synthetic */ boolean useVillages;
        public /* synthetic */ float mainNoiseScaleX;
        public /* synthetic */ int goldSize;
        public /* synthetic */ boolean useLavaLakes;
        public /* synthetic */ int goldMaxHeight;
        public /* synthetic */ int gravelMaxHeight;
        public /* synthetic */ float stretchY;
        
        @Override
        public int hashCode() {
            int llllllIIIlIIllI = (this.coordinateScale == 0.0f) ? 0 : Float.floatToIntBits(this.coordinateScale);
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + ((this.heightScale == 0.0f) ? 0 : Float.floatToIntBits(this.heightScale));
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + ((this.upperLimitScale == 0.0f) ? 0 : Float.floatToIntBits(this.upperLimitScale));
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + ((this.lowerLimitScale == 0.0f) ? 0 : Float.floatToIntBits(this.lowerLimitScale));
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + ((this.depthNoiseScaleX == 0.0f) ? 0 : Float.floatToIntBits(this.depthNoiseScaleX));
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + ((this.depthNoiseScaleZ == 0.0f) ? 0 : Float.floatToIntBits(this.depthNoiseScaleZ));
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + ((this.depthNoiseScaleExponent == 0.0f) ? 0 : Float.floatToIntBits(this.depthNoiseScaleExponent));
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + ((this.mainNoiseScaleX == 0.0f) ? 0 : Float.floatToIntBits(this.mainNoiseScaleX));
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + ((this.mainNoiseScaleY == 0.0f) ? 0 : Float.floatToIntBits(this.mainNoiseScaleY));
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + ((this.mainNoiseScaleZ == 0.0f) ? 0 : Float.floatToIntBits(this.mainNoiseScaleZ));
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + ((this.baseSize == 0.0f) ? 0 : Float.floatToIntBits(this.baseSize));
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + ((this.stretchY == 0.0f) ? 0 : Float.floatToIntBits(this.stretchY));
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + ((this.biomeDepthWeight == 0.0f) ? 0 : Float.floatToIntBits(this.biomeDepthWeight));
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + ((this.biomeDepthOffset == 0.0f) ? 0 : Float.floatToIntBits(this.biomeDepthOffset));
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + ((this.biomeScaleWeight == 0.0f) ? 0 : Float.floatToIntBits(this.biomeScaleWeight));
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + ((this.biomeScaleOffset == 0.0f) ? 0 : Float.floatToIntBits(this.biomeScaleOffset));
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.seaLevel;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + (this.useCaves ? 1 : 0);
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + (this.useDungeons ? 1 : 0);
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.dungeonChance;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + (this.useStrongholds ? 1 : 0);
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + (this.useVillages ? 1 : 0);
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + (this.useMineShafts ? 1 : 0);
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + (this.useTemples ? 1 : 0);
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + (this.useMonuments ? 1 : 0);
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + (this.field_191076_A ? 1 : 0);
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + (this.useRavines ? 1 : 0);
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + (this.useWaterLakes ? 1 : 0);
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.waterLakeChance;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + (this.useLavaLakes ? 1 : 0);
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.lavaLakeChance;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + (this.useLavaOceans ? 1 : 0);
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.fixedBiome;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.biomeSize;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.riverSize;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.dirtSize;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.dirtCount;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.dirtMinHeight;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.dirtMaxHeight;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.gravelSize;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.gravelCount;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.gravelMinHeight;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.gravelMaxHeight;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.graniteSize;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.graniteCount;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.graniteMinHeight;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.graniteMaxHeight;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.dioriteSize;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.dioriteCount;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.dioriteMinHeight;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.dioriteMaxHeight;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.andesiteSize;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.andesiteCount;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.andesiteMinHeight;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.andesiteMaxHeight;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.coalSize;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.coalCount;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.coalMinHeight;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.coalMaxHeight;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.ironSize;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.ironCount;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.ironMinHeight;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.ironMaxHeight;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.goldSize;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.goldCount;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.goldMinHeight;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.goldMaxHeight;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.redstoneSize;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.redstoneCount;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.redstoneMinHeight;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.redstoneMaxHeight;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.diamondSize;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.diamondCount;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.diamondMinHeight;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.diamondMaxHeight;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.lapisSize;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.lapisCount;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.lapisCenterHeight;
            llllllIIIlIIllI = 31 * llllllIIIlIIllI + this.lapisSpread;
            return llllllIIIlIIllI;
        }
        
        public static Factory jsonToFactory(final String llllllIIIllllIl) {
            if (llllllIIIllllIl.isEmpty()) {
                return new Factory();
            }
            try {
                return JsonUtils.gsonDeserialize(Factory.JSON_ADAPTER, llllllIIIllllIl, Factory.class);
            }
            catch (Exception llllllIIIlllllI) {
                return new Factory();
            }
        }
        
        static {
            JSON_ADAPTER = new GsonBuilder().registerTypeAdapter((Type)Factory.class, (Object)new Serializer()).create();
        }
        
        public void setDefaults() {
            this.coordinateScale = 684.412f;
            this.heightScale = 684.412f;
            this.upperLimitScale = 512.0f;
            this.lowerLimitScale = 512.0f;
            this.depthNoiseScaleX = 200.0f;
            this.depthNoiseScaleZ = 200.0f;
            this.depthNoiseScaleExponent = 0.5f;
            this.mainNoiseScaleX = 80.0f;
            this.mainNoiseScaleY = 160.0f;
            this.mainNoiseScaleZ = 80.0f;
            this.baseSize = 8.5f;
            this.stretchY = 12.0f;
            this.biomeDepthWeight = 1.0f;
            this.biomeDepthOffset = 0.0f;
            this.biomeScaleWeight = 1.0f;
            this.biomeScaleOffset = 0.0f;
            this.seaLevel = 63;
            this.useCaves = true;
            this.useDungeons = true;
            this.dungeonChance = 8;
            this.useStrongholds = true;
            this.useVillages = true;
            this.useMineShafts = true;
            this.useTemples = true;
            this.useMonuments = true;
            this.field_191076_A = true;
            this.useRavines = true;
            this.useWaterLakes = true;
            this.waterLakeChance = 4;
            this.useLavaLakes = true;
            this.lavaLakeChance = 80;
            this.useLavaOceans = false;
            this.fixedBiome = -1;
            this.biomeSize = 4;
            this.riverSize = 4;
            this.dirtSize = 33;
            this.dirtCount = 10;
            this.dirtMinHeight = 0;
            this.dirtMaxHeight = 256;
            this.gravelSize = 33;
            this.gravelCount = 8;
            this.gravelMinHeight = 0;
            this.gravelMaxHeight = 256;
            this.graniteSize = 33;
            this.graniteCount = 10;
            this.graniteMinHeight = 0;
            this.graniteMaxHeight = 80;
            this.dioriteSize = 33;
            this.dioriteCount = 10;
            this.dioriteMinHeight = 0;
            this.dioriteMaxHeight = 80;
            this.andesiteSize = 33;
            this.andesiteCount = 10;
            this.andesiteMinHeight = 0;
            this.andesiteMaxHeight = 80;
            this.coalSize = 17;
            this.coalCount = 20;
            this.coalMinHeight = 0;
            this.coalMaxHeight = 128;
            this.ironSize = 9;
            this.ironCount = 20;
            this.ironMinHeight = 0;
            this.ironMaxHeight = 64;
            this.goldSize = 9;
            this.goldCount = 2;
            this.goldMinHeight = 0;
            this.goldMaxHeight = 32;
            this.redstoneSize = 8;
            this.redstoneCount = 8;
            this.redstoneMinHeight = 0;
            this.redstoneMaxHeight = 16;
            this.diamondSize = 8;
            this.diamondCount = 1;
            this.diamondMinHeight = 0;
            this.diamondMaxHeight = 16;
            this.lapisSize = 7;
            this.lapisCount = 1;
            this.lapisCenterHeight = 16;
            this.lapisSpread = 16;
        }
        
        public ChunkGeneratorSettings build() {
            return new ChunkGeneratorSettings(this, null);
        }
        
        @Override
        public boolean equals(final Object llllllIIIlIlIll) {
            if (this == llllllIIIlIlIll) {
                return true;
            }
            if (llllllIIIlIlIll != null && this.getClass() == llllllIIIlIlIll.getClass()) {
                final Factory llllllIIIlIllIl = (Factory)llllllIIIlIlIll;
                return this.andesiteCount == llllllIIIlIllIl.andesiteCount && this.andesiteMaxHeight == llllllIIIlIllIl.andesiteMaxHeight && this.andesiteMinHeight == llllllIIIlIllIl.andesiteMinHeight && this.andesiteSize == llllllIIIlIllIl.andesiteSize && Float.compare(llllllIIIlIllIl.baseSize, this.baseSize) == 0 && Float.compare(llllllIIIlIllIl.biomeDepthOffset, this.biomeDepthOffset) == 0 && Float.compare(llllllIIIlIllIl.biomeDepthWeight, this.biomeDepthWeight) == 0 && Float.compare(llllllIIIlIllIl.biomeScaleOffset, this.biomeScaleOffset) == 0 && Float.compare(llllllIIIlIllIl.biomeScaleWeight, this.biomeScaleWeight) == 0 && this.biomeSize == llllllIIIlIllIl.biomeSize && this.coalCount == llllllIIIlIllIl.coalCount && this.coalMaxHeight == llllllIIIlIllIl.coalMaxHeight && this.coalMinHeight == llllllIIIlIllIl.coalMinHeight && this.coalSize == llllllIIIlIllIl.coalSize && Float.compare(llllllIIIlIllIl.coordinateScale, this.coordinateScale) == 0 && Float.compare(llllllIIIlIllIl.depthNoiseScaleExponent, this.depthNoiseScaleExponent) == 0 && Float.compare(llllllIIIlIllIl.depthNoiseScaleX, this.depthNoiseScaleX) == 0 && Float.compare(llllllIIIlIllIl.depthNoiseScaleZ, this.depthNoiseScaleZ) == 0 && this.diamondCount == llllllIIIlIllIl.diamondCount && this.diamondMaxHeight == llllllIIIlIllIl.diamondMaxHeight && this.diamondMinHeight == llllllIIIlIllIl.diamondMinHeight && this.diamondSize == llllllIIIlIllIl.diamondSize && this.dioriteCount == llllllIIIlIllIl.dioriteCount && this.dioriteMaxHeight == llllllIIIlIllIl.dioriteMaxHeight && this.dioriteMinHeight == llllllIIIlIllIl.dioriteMinHeight && this.dioriteSize == llllllIIIlIllIl.dioriteSize && this.dirtCount == llllllIIIlIllIl.dirtCount && this.dirtMaxHeight == llllllIIIlIllIl.dirtMaxHeight && this.dirtMinHeight == llllllIIIlIllIl.dirtMinHeight && this.dirtSize == llllllIIIlIllIl.dirtSize && this.dungeonChance == llllllIIIlIllIl.dungeonChance && this.fixedBiome == llllllIIIlIllIl.fixedBiome && this.goldCount == llllllIIIlIllIl.goldCount && this.goldMaxHeight == llllllIIIlIllIl.goldMaxHeight && this.goldMinHeight == llllllIIIlIllIl.goldMinHeight && this.goldSize == llllllIIIlIllIl.goldSize && this.graniteCount == llllllIIIlIllIl.graniteCount && this.graniteMaxHeight == llllllIIIlIllIl.graniteMaxHeight && this.graniteMinHeight == llllllIIIlIllIl.graniteMinHeight && this.graniteSize == llllllIIIlIllIl.graniteSize && this.gravelCount == llllllIIIlIllIl.gravelCount && this.gravelMaxHeight == llllllIIIlIllIl.gravelMaxHeight && this.gravelMinHeight == llllllIIIlIllIl.gravelMinHeight && this.gravelSize == llllllIIIlIllIl.gravelSize && Float.compare(llllllIIIlIllIl.heightScale, this.heightScale) == 0 && this.ironCount == llllllIIIlIllIl.ironCount && this.ironMaxHeight == llllllIIIlIllIl.ironMaxHeight && this.ironMinHeight == llllllIIIlIllIl.ironMinHeight && this.ironSize == llllllIIIlIllIl.ironSize && this.lapisCenterHeight == llllllIIIlIllIl.lapisCenterHeight && this.lapisCount == llllllIIIlIllIl.lapisCount && this.lapisSize == llllllIIIlIllIl.lapisSize && this.lapisSpread == llllllIIIlIllIl.lapisSpread && this.lavaLakeChance == llllllIIIlIllIl.lavaLakeChance && Float.compare(llllllIIIlIllIl.lowerLimitScale, this.lowerLimitScale) == 0 && Float.compare(llllllIIIlIllIl.mainNoiseScaleX, this.mainNoiseScaleX) == 0 && Float.compare(llllllIIIlIllIl.mainNoiseScaleY, this.mainNoiseScaleY) == 0 && Float.compare(llllllIIIlIllIl.mainNoiseScaleZ, this.mainNoiseScaleZ) == 0 && this.redstoneCount == llllllIIIlIllIl.redstoneCount && this.redstoneMaxHeight == llllllIIIlIllIl.redstoneMaxHeight && this.redstoneMinHeight == llllllIIIlIllIl.redstoneMinHeight && this.redstoneSize == llllllIIIlIllIl.redstoneSize && this.riverSize == llllllIIIlIllIl.riverSize && this.seaLevel == llllllIIIlIllIl.seaLevel && Float.compare(llllllIIIlIllIl.stretchY, this.stretchY) == 0 && Float.compare(llllllIIIlIllIl.upperLimitScale, this.upperLimitScale) == 0 && this.useCaves == llllllIIIlIllIl.useCaves && this.useDungeons == llllllIIIlIllIl.useDungeons && this.useLavaLakes == llllllIIIlIllIl.useLavaLakes && this.useLavaOceans == llllllIIIlIllIl.useLavaOceans && this.useMineShafts == llllllIIIlIllIl.useMineShafts && this.useRavines == llllllIIIlIllIl.useRavines && this.useStrongholds == llllllIIIlIllIl.useStrongholds && this.useTemples == llllllIIIlIllIl.useTemples && this.useMonuments == llllllIIIlIllIl.useMonuments && this.field_191076_A == llllllIIIlIllIl.field_191076_A && this.useVillages == llllllIIIlIllIl.useVillages && this.useWaterLakes == llllllIIIlIllIl.useWaterLakes && this.waterLakeChance == llllllIIIlIllIl.waterLakeChance;
            }
            return false;
        }
        
        @Override
        public String toString() {
            return Factory.JSON_ADAPTER.toJson((Object)this);
        }
        
        public Factory() {
            this.coordinateScale = 684.412f;
            this.heightScale = 684.412f;
            this.upperLimitScale = 512.0f;
            this.lowerLimitScale = 512.0f;
            this.depthNoiseScaleX = 200.0f;
            this.depthNoiseScaleZ = 200.0f;
            this.depthNoiseScaleExponent = 0.5f;
            this.mainNoiseScaleX = 80.0f;
            this.mainNoiseScaleY = 160.0f;
            this.mainNoiseScaleZ = 80.0f;
            this.baseSize = 8.5f;
            this.stretchY = 12.0f;
            this.biomeDepthWeight = 1.0f;
            this.biomeScaleWeight = 1.0f;
            this.seaLevel = 63;
            this.useCaves = true;
            this.useDungeons = true;
            this.dungeonChance = 8;
            this.useStrongholds = true;
            this.useVillages = true;
            this.useMineShafts = true;
            this.useTemples = true;
            this.useMonuments = true;
            this.field_191076_A = true;
            this.useRavines = true;
            this.useWaterLakes = true;
            this.waterLakeChance = 4;
            this.useLavaLakes = true;
            this.lavaLakeChance = 80;
            this.fixedBiome = -1;
            this.biomeSize = 4;
            this.riverSize = 4;
            this.dirtSize = 33;
            this.dirtCount = 10;
            this.dirtMaxHeight = 256;
            this.gravelSize = 33;
            this.gravelCount = 8;
            this.gravelMaxHeight = 256;
            this.graniteSize = 33;
            this.graniteCount = 10;
            this.graniteMaxHeight = 80;
            this.dioriteSize = 33;
            this.dioriteCount = 10;
            this.dioriteMaxHeight = 80;
            this.andesiteSize = 33;
            this.andesiteCount = 10;
            this.andesiteMaxHeight = 80;
            this.coalSize = 17;
            this.coalCount = 20;
            this.coalMaxHeight = 128;
            this.ironSize = 9;
            this.ironCount = 20;
            this.ironMaxHeight = 64;
            this.goldSize = 9;
            this.goldCount = 2;
            this.goldMaxHeight = 32;
            this.redstoneSize = 8;
            this.redstoneCount = 8;
            this.redstoneMaxHeight = 16;
            this.diamondSize = 8;
            this.diamondCount = 1;
            this.diamondMaxHeight = 16;
            this.lapisSize = 7;
            this.lapisCount = 1;
            this.lapisCenterHeight = 16;
            this.lapisSpread = 16;
            this.setDefaults();
        }
    }
}
